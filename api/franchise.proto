syntax = "proto3";
option go_package = "/gen";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";


message Franchise {
  string url = 1;
  google.protobuf.Timestamp create_date = 2;
  google.protobuf.Timestamp expires_date = 3;
  string name = 4;
  string email = 5;
  Location location = 6;
  uint32 company_id = 7;
  Metadata metadata = 8;
}

message Location {
    string city = 1;
    string address = 2;
    Country country = 3;
}
  
message Country {
    string name = 1;
}

message CreateFranchiseRequest {
    string host = 1;
}

message CreateFranchiseResponse {
    string error = 1;
}

message GetFranchiseByFilterRequest {
    string key = 1;
    string value = 2;
}

message GetFranchiseRequest {
    uint32 company_id = 1;
}

message GetFranchiseResponse {
    repeated Franchise franchise = 1;
}

message Endpoint {
    string server_name = 1;
    string ip_address = 2;
}

message Metadata {
    string protocol = 1;
    string availability = 2;
    repeated Endpoint endpoints = 3;
    uint32 franchise_id = 4;
}

message CreateMetadataRequest {
    string host = 1;
    uint32 franchise_id = 2;
    uint32 company_id = 3;
}

message CreateMetadataResponse {
    string error = 1;
}

message GetMetadataRequest {
    uint32 company_id = 1;
}

message GetMetadataByFilterRequest {
    string key = 1;
    uint32 value = 2;
}

message GetMetadataResponse {
    repeated Metadata metadata = 1;
}

message UpdateFranchiseResponse {
    string error = 1;
}
message UpdateFranchiseRequest {
    uint32 id = 1;
    Franchise franchise = 2;
}

service MetadataService {
    rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse) {
        option (google.api.http) = {
            get: "/v1/metadata"
        };
    }
    rpc GetMetadataByFilter(GetMetadataByFilterRequest) returns (GetMetadataResponse);
    rpc CreateMetadata(CreateMetadataRequest) returns (CreateMetadataResponse) {
        option (google.api.http) = {
            post: "/v1/metadata"
            body: "*"
        };
    }
}


service FranchiseService {
    rpc GetFranchise(GetFranchiseRequest) returns (GetFranchiseResponse){
        option (google.api.http) = {
            get: "/v1/franchise"
        };
    }
    rpc GetFranchiseByFilter(GetFranchiseByFilterRequest) returns (GetFranchiseResponse){
        option (google.api.http) = {
            get: "/v1/franchise/filter"
        };
    }
    rpc CreateFranchise(CreateFranchiseRequest) returns (CreateFranchiseResponse) {
        option (google.api.http) = {
            post: "/v1/franchises"
            body: "*" 
        };
    }
    rpc UpdateFranchise(UpdateFranchiseRequest) returns (UpdateFranchiseResponse)  {
        option (google.api.http) = {
            put: "/v1/franchise/{id}"
            body: "*"
        };
    }
}
